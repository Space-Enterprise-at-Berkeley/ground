{"ast":null,"code":"class Comms {\n  constructor() {\n    this.init = ipc => {\n      this.ipc = ipc; // ipc instance used to communicate with main process\n    };\n\n    this.listPorts = async () => {\n      return await this.ipc.invoke('list-ports');\n    };\n\n    this.selectPort = async (port, baud) => {\n      return await this.ipc.invoke('select-port', port, baud);\n    };\n\n    this.getConnected = async () => {\n      return await this.ipc.invoke('get-connected');\n    };\n\n    this.getPort = async () => {\n      return await this.ipc.invoke('get-port');\n    };\n\n    this.startRecording = async name => {\n      return await this.ipc.invoke('start-recording', name);\n    };\n\n    this.stopRecording = async () => {\n      return await this.ipc.invoke('stop-recording');\n    };\n\n    this.getSelectedInfluxDB = async () => {\n      return await this.ipc.invoke('get-database');\n    };\n\n    this.setInfluxDB = async db => {\n      return await this.ipc.invoke('select-database', db);\n    };\n\n    this.sendPacket = async (id, data) => {\n      return await this.ipc.invoke('send-packet', id, data);\n    };\n\n    this.connListen = handle => {\n      this.ipc.on('connect', event => {\n        handle(true);\n      });\n      this.ipc.on('disconnect', event => {\n        handle(false);\n      });\n    };\n\n    this.sensorListen = handle => {\n      this.ipc.on('sensor-data', (event, payload) => {\n        handle(payload);\n      });\n    };\n\n    this.bandwidthListen = handle => {\n      this.ipc.on('bandwidth', (event, payload) => {\n        handle(payload);\n      });\n    };\n\n    this.valveListen = handle => {\n      this.ipc.on('valve-update', (event, payload) => {\n        handle(payload);\n      });\n    };\n\n    this.ipc = null;\n    this.connHandles = [];\n  }\n  /**\n   * The IPC object allows the renderer process\n   * (this one) to talk to the main process. This is\n   * important, because only the main process can\n   * access hardware like serial ports and the file\n   * system.\n   * @param {EventEmitter} ipc the ipc instance used to communicate with main process\n   */\n\n\n}\n\nconst instance = new Comms();\nexport default instance;","map":{"version":3,"sources":["/Users/nlautrette/Documents/GitHub/ground/control/src/comms.js"],"names":["Comms","constructor","init","ipc","listPorts","invoke","selectPort","port","baud","getConnected","getPort","startRecording","name","stopRecording","getSelectedInfluxDB","setInfluxDB","db","sendPacket","id","data","connListen","handle","on","event","sensorListen","payload","bandwidthListen","valveListen","connHandles","instance"],"mappings":"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","sourcesContent":["class Comms {\n  constructor() {\n    this.ipc = null;\n    this.connHandles = [];\n  }\n\n  /**\n   * The IPC object allows the renderer process\n   * (this one) to talk to the main process. This is\n   * important, because only the main process can\n   * access hardware like serial ports and the file\n   * system.\n   * @param {EventEmitter} ipc the ipc instance used to communicate with main process\n   */\n  init = ipc => {\n    this.ipc = ipc; // ipc instance used to communicate with main process\n  }\n\n  /**\n   * @return {Array} a list of ports by name\n   */\n  listPorts = async () => {\n    return await this.ipc.invoke('list-ports');\n  }\n\n  /**\n   * @param {Object} port port object\n   * @param {Number} baud the baud rate for the port (should be 57600 for Radio)\n   */\n  selectPort = async (port, baud) => {\n    return await this.ipc.invoke('select-port', port, baud);\n  }\n\n  getConnected = async () => {\n    return await this.ipc.invoke('get-connected');\n  }\n\n  getPort = async () => {\n    return await this.ipc.invoke('get-port');\n  }\n\n\n  startRecording = async (name) => {\n    return await this.ipc.invoke('start-recording', name);\n  }\n\n  stopRecording = async () => {\n    return await this.ipc.invoke('stop-recording');\n  }\n\n  getSelectedInfluxDB = async () => {\n    return await this.ipc.invoke('get-database');\n  }\n\n  setInfluxDB = async (db) => {\n    return await this.ipc.invoke('select-database', db);\n  }\n  \n  sendPacket = async (id, data) => {\n    return await this.ipc.invoke('send-packet', id, data);\n  }\n\n\n\n  /**\n   * @param {function} handle function to call when connection status changes\n   */\n  connListen = handle => {\n    this.ipc.on('connect', (event) => {\n      handle(true);\n    });\n    this.ipc.on('disconnect', (event) => {\n      handle(false);\n    });\n  }\n\n  sensorListen = handle => {\n    this.ipc.on('sensor-data', (event, payload) => {\n      handle(payload);\n    });\n  }\n\n  bandwidthListen = handle => {\n    this.ipc.on('bandwidth', (event, payload) => {\n      handle(payload);\n    });\n  }\n\n  /**\n   * @param {function} handle function to call when connection status changes\n   */\n  valveListen = handle => {\n    this.ipc.on('valve-update', (event, payload) => {\n      handle(payload);\n    });\n  }\n}\n\nconst instance = new Comms();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}